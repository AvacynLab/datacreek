.......................FFFF................F............F....F.......... [ 23%]
........FF...FFFF....FFF..................................F.F........... [ 47%]
.......FFFFFFFFFFF.FFFFFFFFFFFFFFF...FFFFFFFFFFFF...FF.................. [ 70%]
F.....................F...............F............FF.FFFFFFF........... [ 94%]
...F.......F......                                                       [100%]
==================================== ERRORS ====================================
___________________ ERROR collecting tests/unit/test_api.py ____________________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_api.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_api.py:4: in <module>
    from fastapi import HTTPException
E   ModuleNotFoundError: No module named 'fastapi'
_________________ ERROR collecting tests/unit/test_autotune.py _________________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_autotune.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_autotune.py:1: in <module>
    import networkx as nx
E   ModuleNotFoundError: No module named 'networkx'
______________ ERROR collecting tests/unit/test_chebyshev_diag.py ______________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_chebyshev_diag.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_chebyshev_diag.py:1: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
___________________ ERROR collecting tests/unit/test_cli.py ____________________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_cli.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_cli.py:1: in <module>
    from typer.testing import CliRunner
E   ModuleNotFoundError: No module named 'typer'
_______________ ERROR collecting tests/unit/test_compression.py ________________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_compression.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_compression.py:3: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
_______________ ERROR collecting tests/unit/test_core_fractal.py _______________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_core_fractal.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_core_fractal.py:1: in <module>
    import networkx as nx
E   ModuleNotFoundError: No module named 'networkx'
______________ ERROR collecting tests/unit/test_dp_middleware.py _______________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_dp_middleware.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_dp_middleware.py:3: in <module>
    from starlette.applications import Starlette
E   ModuleNotFoundError: No module named 'starlette'
______________ ERROR collecting tests/unit/test_explain_router.py ______________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_explain_router.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_explain_router.py:4: in <module>
    from fastapi import HTTPException
E   ModuleNotFoundError: No module named 'fastapi'
________________ ERROR collecting tests/unit/test_filtering.py _________________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_filtering.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_filtering.py:1: in <module>
    import networkx as nx
E   ModuleNotFoundError: No module named 'networkx'
_________________ ERROR collecting tests/unit/test_fractal.py __________________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_fractal.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_fractal.py:2: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
________________ ERROR collecting tests/unit/test_generation.py ________________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_generation.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_generation.py:7: in <module>
    import networkx as nx
E   ModuleNotFoundError: No module named 'networkx'
________________ ERROR collecting tests/unit/test_generators.py ________________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_generators.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_generators.py:2: in <module>
    import networkx as nx
E   ModuleNotFoundError: No module named 'networkx'
________________ ERROR collecting tests/unit/test_governance.py ________________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_governance.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_governance.py:1: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
________________ ERROR collecting tests/unit/test_graph_text.py ________________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_graph_text.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_graph_text.py:1: in <module>
    import networkx as nx
E   ModuleNotFoundError: No module named 'networkx'
___________ ERROR collecting tests/unit/test_graphwave_bandwidth.py ____________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_graphwave_bandwidth.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_graphwave_bandwidth.py:1: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
________________ ERROR collecting tests/unit/test_hybrid_ann.py ________________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_hybrid_ann.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_hybrid_ann.py:2: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
________________ ERROR collecting tests/unit/test_hypergraph.py ________________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_hypergraph.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_hypergraph.py:1: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
_______________ ERROR collecting tests/unit/test_image_dedup.py ________________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_image_dedup.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_image_dedup.py:10: in <module>
    Image = importlib.import_module("PIL.Image")
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   ModuleNotFoundError: No module named 'PIL'
__________________ ERROR collecting tests/unit/test_index.py ___________________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_index.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_index.py:2: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
_______________ ERROR collecting tests/unit/test_information.py ________________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_information.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_information.py:3: in <module>
    import networkx as nx
E   ModuleNotFoundError: No module named 'networkx'
________ ERROR collecting tests/unit/test_knowledge_graph_additional.py ________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_knowledge_graph_additional.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_knowledge_graph_additional.py:1: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
_________ ERROR collecting tests/unit/test_knowledge_graph_analysis.py _________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_knowledge_graph_analysis.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_knowledge_graph_analysis.py:3: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
_________ ERROR collecting tests/unit/test_knowledge_graph_cleanup.py __________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_knowledge_graph_cleanup.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_knowledge_graph_cleanup.py:1: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
________ ERROR collecting tests/unit/test_knowledge_graph_embeddings.py ________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_knowledge_graph_embeddings.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_knowledge_graph_embeddings.py:1: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
__________ ERROR collecting tests/unit/test_knowledge_graph_enrich.py __________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_knowledge_graph_enrich.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_knowledge_graph_enrich.py:2: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
_________ ERROR collecting tests/unit/test_knowledge_graph_entropy.py __________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_knowledge_graph_entropy.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_knowledge_graph_entropy.py:1: in <module>
    import networkx as nx
E   ModuleNotFoundError: No module named 'networkx'
__________ ERROR collecting tests/unit/test_knowledge_graph_extra.py ___________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_knowledge_graph_extra.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_knowledge_graph_extra.py:2: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
__________ ERROR collecting tests/unit/test_knowledge_graph_hyper.py ___________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_knowledge_graph_hyper.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_knowledge_graph_hyper.py:1: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
___________ ERROR collecting tests/unit/test_knowledge_graph_meta.py ___________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_knowledge_graph_meta.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_knowledge_graph_meta.py:2: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
___________ ERROR collecting tests/unit/test_knowledge_graph_more.py ___________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_knowledge_graph_more.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_knowledge_graph_more.py:1: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
________ ERROR collecting tests/unit/test_knowledge_graph_operations.py ________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_knowledge_graph_operations.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_knowledge_graph_operations.py:3: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
_________ ERROR collecting tests/unit/test_knowledge_graph_scoring.py __________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_knowledge_graph_scoring.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_knowledge_graph_scoring.py:1: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
__________________ ERROR collecting tests/unit/test_mapper.py __________________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_mapper.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_mapper.py:5: in <module>
    import lmdb
E   ModuleNotFoundError: No module named 'lmdb'
________________ ERROR collecting tests/unit/test_multiview.py _________________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_multiview.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_multiview.py:6: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
______________ ERROR collecting tests/unit/test_neo4j_breaker.py _______________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_neo4j_breaker.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_neo4j_breaker.py:2: in <module>
    from datacreek.utils import neo4j_breaker as nb
datacreek/utils/neo4j_breaker.py:6: in <module>
    import pybreaker
E   ModuleNotFoundError: No module named 'pybreaker'
___________ ERROR collecting tests/unit/test_poincare_recentering.py ___________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_poincare_recentering.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_poincare_recentering.py:2: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
_________________ ERROR collecting tests/unit/test_progress.py _________________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_progress.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_progress.py:4: in <module>
    import datacreek.utils.progress as prog
datacreek/utils/progress.py:4: in <module>
    from rich.progress import (
E   ModuleNotFoundError: No module named 'rich'
____________ ERROR collecting tests/unit/test_qagenerator_basic.py _____________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_qagenerator_basic.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_qagenerator_basic.py:2: in <module>
    from datacreek.generators.qa_generator import QAGenerator
datacreek/generators/qa_generator.py:29: in <module>
    from datacreek.utils.progress import create_progress, progress_context
datacreek/utils/progress.py:4: in <module>
    from rich.progress import (
E   ModuleNotFoundError: No module named 'rich'
________________ ERROR collecting tests/unit/test_retrieval.py _________________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_retrieval.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_retrieval.py:3: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
___________ ERROR collecting tests/unit/test_retrieval_neighbors.py ____________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_retrieval_neighbors.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_retrieval_neighbors.py:5: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
_________________ ERROR collecting tests/unit/test_rollback.py _________________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_rollback.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_rollback.py:5: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
_________________ ERROR collecting tests/unit/test_runners.py __________________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_runners.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_runners.py:2: in <module>
    import networkx as nx
E   ModuleNotFoundError: No module named 'networkx'
______________ ERROR collecting tests/unit/test_self_instruct.py _______________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_self_instruct.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_self_instruct.py:7: in <module>
    import datacreek.utils.self_instruct as si
datacreek/utils/self_instruct.py:9: in <module>
    from ..templates.library import validate_output
datacreek/templates/__init__.py:1: in <module>
    from .library import PromptTemplate, get_template, validate_output
datacreek/templates/library.py:11: in <module>
    import jsonschema
E   ModuleNotFoundError: No module named 'jsonschema'
_________________ ERROR collecting tests/unit/test_services.py _________________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_services.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_services.py:3: in <module>
    from sqlalchemy import create_engine
E   ModuleNotFoundError: No module named 'sqlalchemy'
__________________ ERROR collecting tests/unit/test_sheaf.py ___________________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_sheaf.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_sheaf.py:3: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
_________________ ERROR collecting tests/unit/test_storage.py __________________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_storage.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_storage.py:3: in <module>
    import fakeredis
E   ModuleNotFoundError: No module named 'fakeredis'
_________________ ERROR collecting tests/unit/test_symmetry.py _________________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_symmetry.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_symmetry.py:1: in <module>
    import networkx as nx
E   ModuleNotFoundError: No module named 'networkx'
__________________ ERROR collecting tests/unit/test_tasks.py ___________________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_tasks.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_tasks.py:1: in <module>
    import fakeredis
E   ModuleNotFoundError: No module named 'fakeredis'
________________ ERROR collecting tests/unit/test_telemetry.py _________________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_telemetry.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_telemetry.py:3: in <module>
    import datacreek.telemetry as telem
datacreek/telemetry.py:9: in <module>
    from fastapi import FastAPI
E   ModuleNotFoundError: No module named 'fastapi'
_____________ ERROR collecting tests/unit/test_template_library.py _____________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_template_library.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_template_library.py:3: in <module>
    import datacreek.templates.library as lib
datacreek/templates/__init__.py:1: in <module>
    from .library import PromptTemplate, get_template, validate_output
datacreek/templates/library.py:11: in <module>
    import jsonschema
E   ModuleNotFoundError: No module named 'jsonschema'
______________ ERROR collecting tests/unit/test_tenant_privacy.py ______________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_tenant_privacy.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_tenant_privacy.py:5: in <module>
    import datacreek.security.tenant_privacy as tp
datacreek/security/tenant_privacy.py:5: in <module>
    from sqlalchemy.orm import Session
E   ModuleNotFoundError: No module named 'sqlalchemy'
______________ ERROR collecting tests/unit/test_vector_router.py _______________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_vector_router.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_vector_router.py:3: in <module>
    from fastapi import HTTPException
E   ModuleNotFoundError: No module named 'fastapi'
___________ ERROR collecting tests/unit/test_vqa_generator_extra.py ____________
ImportError while importing test module '/workspace/datacreek/tests/unit/test_vqa_generator_extra.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/unit/test_vqa_generator_extra.py:5: in <module>
    from PIL import Image
E   ModuleNotFoundError: No module named 'PIL'
=================================== FAILURES ===================================
______________________ test_async_process_batches_success ______________________
async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted
_______________________ test_async_process_batches_error _______________________
async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted
____________________ test_async_process_batches_parse_error ____________________
async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted
__________________ test_async_process_batches_raise_on_error ___________________
async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted
________________________ test_format_and_model_profiles ________________________

tmp_path = PosixPath('/tmp/pytest-of-root/pytest-11/test_format_and_model_profiles0')
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f67213e3a70>

    def test_format_and_model_profiles(tmp_path, monkeypatch):
        cfg_file = create_config_file(tmp_path)
        monkeypatch.setenv("DATACREEK_CONFIG", str(cfg_file))
        cfg = config.load_config()
        fs = config.get_format_settings(cfg)
        assert fs.include_metadata is False
        profile = config.get_model_profile(cfg, "small")
>       assert profile == {"dim": 128}
E       AssertionError: assert '{dim: 128}' == {'dim': 128}

tests/unit/test_config_utils.py:75: AssertionError
______________________ test_conversation_generator_async _______________________
async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted
________________________ test_ingest_into_dataset_async ________________________
async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted
_____________________________ test_process_file_qa _____________________________

    # Copyright (c) Meta Platforms, Inc. and affiliates.
    # All rights reserved.
    #
    # This source code is licensed under the terms described in the LICENSE file in
    # the root directory of this source tree.
    # Create QA Pairs
    
    import asyncio
    import json
    import logging
    import time
    from pathlib import Path
    from typing import Any, Dict, List, Optional, Tuple
    
    from datacreek.core.knowledge_graph import KnowledgeGraph
    from datacreek.models.llm_client import LLMClient
    from datacreek.models.qa import QAPair
    from datacreek.utils.config import (
        get_curate_settings,
        get_generation_config,
        get_prompt,
        load_config,
    )
    from datacreek.utils.llm_processing import (
        convert_to_conversation_format,
        parse_qa_pairs,
        parse_ratings,
    )
>   from datacreek.utils.progress import create_progress, progress_context

datacreek/generators/qa_generator.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from contextlib import contextmanager
    from typing import Generator, Tuple
    
>   from rich.progress import (
        BarColumn,
        Progress,
        TextColumn,
        TimeElapsedColumn,
        TimeRemainingColumn,
    )
E   ModuleNotFoundError: No module named 'rich'

datacreek/utils/progress.py:4: ModuleNotFoundError

The above exception was the direct cause of the following exception:

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f67213e0f50>

    def test_process_file_qa(monkeypatch):
        monkeypatch.setattr(create, "LLMClient", DummyLLM)
    
        class DummyGen:
            def __init__(self, *a, **k):
                pass
            def process_document(self, text, num_pairs, verbose):
                assert text == "txt"
                return SimpleNamespace(to_dict=lambda: {"pairs": num_pairs})
>       monkeypatch.setattr("datacreek.generators.qa_generator.QAGenerator", DummyGen)

tests/unit/test_create.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.pyenv/versions/3.12.10/lib/python3.12/site-packages/_pytest/monkeypatch.py:102: in derive_importpath
    target = resolve(module)
             ^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'datacreek.generators.qa_generator'

    def resolve(name: str) -> object:
        # Simplified from zope.dottedname.
        parts = name.split(".")
    
        used = parts.pop(0)
        found: object = __import__(used)
        for part in parts:
            used += "." + part
            try:
                found = getattr(found, part)
            except AttributeError:
                pass
            else:
                continue
            # We use explicit un-nesting of the handling block in order
            # to avoid nested exceptions.
            try:
                __import__(used)
            except ImportError as ex:
                expected = str(ex).split()[-1]
                if expected == used:
                    raise
                else:
>                   raise ImportError(f"import error in {used}: {ex}") from ex
E                   ImportError: import error in datacreek.generators.qa_generator: No module named 'rich'

/root/.pyenv/versions/3.12.10/lib/python3.12/site-packages/_pytest/monkeypatch.py:83: ImportError
___________________________ test_process_file_async ____________________________

    # Copyright (c) Meta Platforms, Inc. and affiliates.
    # All rights reserved.
    #
    # This source code is licensed under the terms described in the LICENSE file in
    # the root directory of this source tree.
    # Create QA Pairs
    
    import asyncio
    import json
    import logging
    import time
    from pathlib import Path
    from typing import Any, Dict, List, Optional, Tuple
    
    from datacreek.core.knowledge_graph import KnowledgeGraph
    from datacreek.models.llm_client import LLMClient
    from datacreek.models.qa import QAPair
    from datacreek.utils.config import (
        get_curate_settings,
        get_generation_config,
        get_prompt,
        load_config,
    )
    from datacreek.utils.llm_processing import (
        convert_to_conversation_format,
        parse_qa_pairs,
        parse_ratings,
    )
>   from datacreek.utils.progress import create_progress, progress_context

datacreek/generators/qa_generator.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from contextlib import contextmanager
    from typing import Generator, Tuple
    
>   from rich.progress import (
        BarColumn,
        Progress,
        TextColumn,
        TimeElapsedColumn,
        TimeRemainingColumn,
    )
E   ModuleNotFoundError: No module named 'rich'

datacreek/utils/progress.py:4: ModuleNotFoundError

The above exception was the direct cause of the following exception:

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f67212eb890>

    def test_process_file_async(monkeypatch):
        monkeypatch.setattr(create, "LLMClient", DummyLLM)
        monkeypatch.setattr(create, "process_file", lambda *a, **k: "sync")
        kg = SimpleNamespace(to_text=lambda: "t")
        res = asyncio.run(create.process_file_async("file", kg=kg, content_type=ContentType.SUMMARY))
        assert res == "sync"
    
        class DummyGen:
            def __init__(self, *a, **k):
                pass
            async def process_document_async(self, text, num_pairs, verbose):
                assert text == "txt"
                return SimpleNamespace(to_dict=lambda: {"async": num_pairs})
>       monkeypatch.setattr("datacreek.generators.qa_generator.QAGenerator", DummyGen)

tests/unit/test_create.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/root/.pyenv/versions/3.12.10/lib/python3.12/site-packages/_pytest/monkeypatch.py:102: in derive_importpath
    target = resolve(module)
             ^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'datacreek.generators.qa_generator'

    def resolve(name: str) -> object:
        # Simplified from zope.dottedname.
        parts = name.split(".")
    
        used = parts.pop(0)
        found: object = __import__(used)
        for part in parts:
            used += "." + part
            try:
                found = getattr(found, part)
            except AttributeError:
                pass
            else:
                continue
            # We use explicit un-nesting of the handling block in order
            # to avoid nested exceptions.
            try:
                __import__(used)
            except ImportError as ex:
                expected = str(ex).split()[-1]
                if expected == used:
                    raise
                else:
>                   raise ImportError(f"import error in {used}: {ex}") from ex
E                   ImportError: import error in datacreek.generators.qa_generator: No module named 'rich'

/root/.pyenv/versions/3.12.10/lib/python3.12/site-packages/_pytest/monkeypatch.py:83: ImportError
__________________________ test_curate_qa_pairs_async __________________________
async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted
______________________ test_curate_qa_pairs_async_invalid ______________________
async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted
____________________ test_curate_qa_pairs_async_parse_error ____________________
async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted
______________________ test_curate_qa_pairs_async_resume _______________________
async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted
___________________ test_curate_qa_pairs_async_input_errors ____________________
async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted
____________________________ test_curate_from_file _____________________________
async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted
_______________________ test_curate_resume_invalid_json ________________________
async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted
____________________________ test_multi_tool_async _____________________________
async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted
_____________________________ test_pref_list_async _____________________________
async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted
______________________ test_structure_helpers_and_queries ______________________

    def test_structure_helpers_and_queries():
>       kg = build_graph()
             ^^^^^^^^^^^^^

tests/unit/test_knowledge_graph_advanced.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/unit/test_knowledge_graph_advanced.py:8: in build_graph
    kg.add_document("d1", "src", text="doc text", author="A", organization="Org")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f6721381d30>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f672144aae0>)
doc_id = 'd1', source = 'src'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
________________________ test_embeddings_and_centrality ________________________

    def test_embeddings_and_centrality():
>       kg = build_graph()
             ^^^^^^^^^^^^^

tests/unit/test_knowledge_graph_advanced.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/unit/test_knowledge_graph_advanced.py:8: in build_graph
    kg.add_document("d1", "src", text="doc text", author="A", organization="Org")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f6721686cc0>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f6721686f30>)
doc_id = 'd1', source = 'src'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
__________________________ test_knowledge_graph_basic __________________________

tmp_path = PosixPath('/tmp/pytest-of-root/pytest-11/test_knowledge_graph_basic0')
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6721383a70>

    def test_knowledge_graph_basic(tmp_path, monkeypatch):
        cfg = tmp_path / "cfg.yaml"
        cfg.write_text(
            """cleanup:
      tau: 3
      sigma: 0.9
      k_min: 2
      lp_sigma: 0.1
      lp_topk: 10
      hub_deg: 50
    """
        )
        monkeypatch.setenv("DATACREEK_CONFIG", str(cfg))
        _load_cleanup()
        assert get_cleanup_cfg()["tau"] == 3
        apply_cleanup_config()
        assert get_cleanup_cfg()["lp_topk"] == 10
        verify_thresholds()
        start_cleanup_watcher(interval=0.01)
        stop_cleanup_watcher()
    
        kg = KnowledgeGraph()
>       kg.add_document("doc", "src", text="<b>Hello</b>", author="auth")

tests/unit/test_knowledge_graph_basic.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f6721382480>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f6721382fc0>)
doc_id = 'doc', source = 'src'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
______________________ test_get_chunk_context_full_range _______________________

    def test_get_chunk_context_full_range():
>       kg = build_graph()
             ^^^^^^^^^^^^^

tests/unit/test_knowledge_graph_context_extra.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/unit/test_knowledge_graph_context_extra.py:7: in build_graph
    kg.add_document("d1", "src")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f6721382c00>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f67213836e0>)
doc_id = 'd1', source = 'src'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
_____________________ test_get_document_for_chunk_missing ______________________

    def test_get_document_for_chunk_missing():
        kg = KnowledgeGraph()
>       kg.add_document("d1", "src")

tests/unit/test_knowledge_graph_context_extra.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f67215b2780>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f67215b24e0>)
doc_id = 'd1', source = 'src'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
________________________ test_duplicate_nodes_and_links ________________________

    def test_duplicate_nodes_and_links():
>       kg = build_basic_graph()
             ^^^^^^^^^^^^^^^^^^^

tests/unit/test_knowledge_graph_errors.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/unit/test_knowledge_graph_errors.py:7: in build_basic_graph
    kg.add_document("d", "src")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f6721383d70>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f6721382ff0>)
doc_id = 'd', source = 'src'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
___________________ test_unknown_nodes_and_invalid_property ____________________

    def test_unknown_nodes_and_invalid_property():
>       kg = build_basic_graph()
             ^^^^^^^^^^^^^^^^^^^

tests/unit/test_knowledge_graph_errors.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/unit/test_knowledge_graph_errors.py:7: in build_basic_graph
    kg.add_document("d", "src")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f6721384d40>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f67213840b0>)
doc_id = 'd', source = 'src'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
_____________________ test_linking_helpers_and_conversions _____________________

    def test_linking_helpers_and_conversions():
>       kg = build_sample_graph()
             ^^^^^^^^^^^^^^^^^^^^

tests/unit/test_knowledge_graph_extended.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/unit/test_knowledge_graph_extended.py:7: in build_sample_graph
    kg.add_document("d1", "src", author="author", organization="org")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f6721387e60>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f6721384aa0>)
doc_id = 'd1', source = 'src'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
______________________ test_search_with_links_and_queries ______________________

    def test_search_with_links_and_queries():
>       kg = build_sample_graph()
             ^^^^^^^^^^^^^^^^^^^^

tests/unit/test_knowledge_graph_extended.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/unit/test_knowledge_graph_extended.py:7: in build_sample_graph
    kg.add_document("d1", "src", author="author", organization="org")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f6721386630>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f6721386540>)
doc_id = 'd1', source = 'src'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
___________________ test_chunk_document_queries_and_cleanup ____________________

    def test_chunk_document_queries_and_cleanup():
>       kg = build_sample_graph()
             ^^^^^^^^^^^^^^^^^^^^

tests/unit/test_knowledge_graph_extended.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/unit/test_knowledge_graph_extended.py:7: in build_sample_graph
    kg.add_document("d1", "src", author="author", organization="org")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f67215b24e0>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f67214a0b30>)
doc_id = 'd1', source = 'src'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
_______________________ test_fact_confidence_and_verify ________________________

    def test_fact_confidence_and_verify():
>       kg = build_graph()
             ^^^^^^^^^^^^^

tests/unit/test_knowledge_graph_facts.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/unit/test_knowledge_graph_facts.py:6: in build_graph
    kg.add_document("d", "src")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f67216a7680>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f67216a64b0>)
doc_id = 'd', source = 'src'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
_________________________ test_to_from_neo4j_roundtrip _________________________

    def test_to_from_neo4j_roundtrip():
        kg = KnowledgeGraph()
>       kg.add_document("d1", "src")

tests/unit/test_knowledge_graph_io.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f67216863f0>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f6721382f30>)
doc_id = 'd1', source = 'src'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
_______________________ test_link_helpers_and_conflicts ________________________

    def test_link_helpers_and_conflicts():
>       kg = build_graph()
             ^^^^^^^^^^^^^

tests/unit/test_knowledge_graph_links.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/unit/test_knowledge_graph_links.py:6: in build_graph
    kg.add_document("d1", "src", author="auth", organization="org")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f67213862a0>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f6721385eb0>)
doc_id = 'd1', source = 'src'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
___________________________ test_remove_and_renumber ___________________________

    def test_remove_and_renumber():
>       kg = build_graph()
             ^^^^^^^^^^^^^

tests/unit/test_knowledge_graph_links.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/unit/test_knowledge_graph_links.py:6: in build_graph
    kg.add_document("d1", "src", author="auth", organization="org")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f6721385250>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f6721387680>)
doc_id = 'd1', source = 'src'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
__________________ test_entity_link_helpers_and_serialization __________________

    def test_entity_link_helpers_and_serialization():
>       kg = build_graph()
             ^^^^^^^^^^^^^

tests/unit/test_knowledge_graph_links2.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/unit/test_knowledge_graph_links2.py:6: in build_graph
    kg.add_document("d1", "src", author="a1", organization="o1")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f6721386390>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f6721385700>)
doc_id = 'd1', source = 'src'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
_____________________ test_add_image_creates_caption_edges _____________________

    def test_add_image_creates_caption_edges():
        kg = KnowledgeGraph()
>       kg.add_document("d1", "src")

tests/unit/test_knowledge_graph_media_atoms.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f6721385e50>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f6721387440>)
doc_id = 'd1', source = 'src'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
____________________ test_remove_chunk_renumbers_sequences _____________________

    def test_remove_chunk_renumbers_sequences():
        kg = KnowledgeGraph()
>       kg.add_document("d1", "src")

tests/unit/test_knowledge_graph_media_atoms.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f6720215400>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f6720214e00>)
doc_id = 'd1', source = 'src'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
___________________ test_atom_molecule_and_hyperedge_simplex ___________________

    def test_atom_molecule_and_hyperedge_simplex():
        kg = KnowledgeGraph()
>       kg.add_document("d1", "src")

tests/unit/test_knowledge_graph_media_atoms.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f6721386900>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f6721386ed0>)
doc_id = 'd1', source = 'src'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
___________________________ test_merge_entity_nodes ____________________________

    def test_merge_entity_nodes():
        kg = KnowledgeGraph()
        # create two entities and additional nodes to connect
>       kg.add_entity("x", "node x")

tests/unit/test_knowledge_graph_merge.py:8: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f6721562810>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f6721562780>)
entity_id = 'x', text = 'node x', source = None

    def add_entity(self, entity_id: str, text: str, source: str | None = None) -> None:  # pragma: no cover - heavy
        """Insert an entity node."""
    
>       if self.graph.has_node(entity_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:285: AttributeError
______________________ test_section_and_chunk_navigation _______________________

    def test_section_and_chunk_navigation():
>       kg = build_graph()
             ^^^^^^^^^^^^^

tests/unit/test_knowledge_graph_navigation.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/unit/test_knowledge_graph_navigation.py:7: in build_graph
    kg.add_document("doc", "src")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f67215b8110>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f67215b81d0>)
doc_id = 'doc', source = 'src'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
_____________________________ test_transcript_link _____________________________

    def test_transcript_link():
>       kg = build_graph()
             ^^^^^^^^^^^^^

tests/unit/test_knowledge_graph_navigation.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/unit/test_knowledge_graph_navigation.py:7: in build_graph
    kg.add_document("doc", "src")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f6724160170>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f6722d1c8c0>)
doc_id = 'doc', source = 'src'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
_________________________ test_get_similar_chunks_data _________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6722d1ff20>

    def test_get_similar_chunks_data(monkeypatch):
>       kg = build_kg()
             ^^^^^^^^^^

tests/unit/test_knowledge_graph_neighbors.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/unit/test_knowledge_graph_neighbors.py:6: in build_kg
    kg.add_document("d", "src")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f6722d1ef60>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f6722d1c560>)
doc_id = 'd', source = 'src'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
___________________________ test_get_chunk_neighbors ___________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6721386330>

    def test_get_chunk_neighbors(monkeypatch):
>       kg = build_kg()
             ^^^^^^^^^^

tests/unit/test_knowledge_graph_neighbors.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/unit/test_knowledge_graph_neighbors.py:6: in build_kg
    kg.add_document("d", "src")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f6721385a90>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f67213855b0>)
doc_id = 'd', source = 'src'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
________________________ test_get_chunk_neighbors_data _________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6721386990>

    def test_get_chunk_neighbors_data(monkeypatch):
>       kg = build_graph()
             ^^^^^^^^^^^^^

tests/unit/test_knowledge_graph_neighbors_data.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/unit/test_knowledge_graph_neighbors_data.py:7: in build_graph
    kg.add_document("d", "src")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f67212e8500>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f67212e9f70>)
doc_id = 'd', source = 'src'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
_________________________ test_fact_and_entity_queries _________________________

    def test_fact_and_entity_queries():
>       kg = build_graph()
             ^^^^^^^^^^^^^

tests/unit/test_knowledge_graph_queries.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/unit/test_knowledge_graph_queries.py:7: in build_graph
    kg.add_document("d1", "src1")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f67216863f0>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f6721687a40>)
doc_id = 'd1', source = 'src1'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
__________________________ test_chunk_context_helpers __________________________

    def test_chunk_context_helpers():
>       kg = build_graph()
             ^^^^^^^^^^^^^

tests/unit/test_knowledge_graph_queries.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/unit/test_knowledge_graph_queries.py:7: in build_graph
    kg.add_document("d1", "src1")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f67213e2d20>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f67214491f0>)
doc_id = 'd1', source = 'src1'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
_______________________ test_search_documents_and_chunks _______________________

    def test_search_documents_and_chunks():
>       kg = build_graph()
             ^^^^^^^^^^^^^

tests/unit/test_knowledge_graph_search_extra.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/unit/test_knowledge_graph_search_extra.py:6: in build_graph
    kg.add_document("doc1", "src1", text="Hello world")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f67214481d0>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f6721448b90>)
doc_id = 'doc1', source = 'src1'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
______________________ test_search_embeddings_and_hybrid _______________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f67214220f0>

    def test_search_embeddings_and_hybrid(monkeypatch):
>       kg = build_graph()
             ^^^^^^^^^^^^^

tests/unit/test_knowledge_graph_search_extra.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/unit/test_knowledge_graph_search_extra.py:6: in build_graph
    kg.add_document("doc1", "src1", text="Hello world")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f6721423890>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f6721423a10>)
doc_id = 'doc1', source = 'src1'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
________________________ test_remove_document_and_chunk ________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f672144ab10>

    def test_remove_document_and_chunk(monkeypatch):
>       kg = build_graph()
             ^^^^^^^^^^^^^

tests/unit/test_knowledge_graph_search_extra.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/unit/test_knowledge_graph_search_extra.py:6: in build_graph
    kg.add_document("doc1", "src1", text="Hello world")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f67213e3ef0>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f67213e3200>)
doc_id = 'doc1', source = 'src1'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
__________________ test_search_with_links_and_fact_confidence __________________

    def test_search_with_links_and_fact_confidence():
>       kg = build_simple_graph()
             ^^^^^^^^^^^^^^^^^^^^

tests/unit/test_knowledge_graph_search_features.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/unit/test_knowledge_graph_search_features.py:7: in build_simple_graph
    kg.add_document("d1", "src")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f6721448080>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f6721643b00>)
doc_id = 'd1', source = 'src'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
___________________ test_link_similar_sections_and_documents ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6721384ec0>

    def test_link_similar_sections_and_documents(monkeypatch):
        kg = KnowledgeGraph()
>       kg.add_document("d1", "src")

tests/unit/test_knowledge_graph_similarity.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f6721386300>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f67213851f0>)
doc_id = 'd1', source = 'src'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
___________________ test_get_similar_sections_and_documents ____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6722d1ed80>

    def test_get_similar_sections_and_documents(monkeypatch):
        kg = KnowledgeGraph()
>       kg.add_document("d1", "src", text="hello world")

tests/unit/test_knowledge_graph_similarity.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f6722a66180>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f6722a66360>)
doc_id = 'd1', source = 'src'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
___________________ test_get_similar_sections_filters_types ____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6722d1c230>

    def test_get_similar_sections_filters_types(monkeypatch):
>       kg = build_kg()
             ^^^^^^^^^^

tests/unit/test_knowledge_graph_similarity_extra.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/unit/test_knowledge_graph_similarity_extra.py:6: in build_kg
    kg.add_document("d1", "src", text="A")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f67214e9550>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f67214e8380>)
doc_id = 'd1', source = 'src'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
___________________ test_get_similar_documents_filters_types ___________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6721562ab0>

    def test_get_similar_documents_filters_types(monkeypatch):
>       kg = build_kg()
             ^^^^^^^^^^

tests/unit/test_knowledge_graph_similarity_extra.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/unit/test_knowledge_graph_similarity_extra.py:6: in build_kg
    kg.add_document("d1", "src", text="A")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f6721560890>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f6721562720>)
doc_id = 'd1', source = 'src'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
____________________________ test_spectral_metrics _____________________________

    def test_spectral_metrics():
>       kg = build_kg()
             ^^^^^^^^^^

tests/unit/test_knowledge_graph_spectral.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/unit/test_knowledge_graph_spectral.py:7: in build_kg
    kg.add_document("d1", "s")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f67213e3170>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f67215b85f0>)
doc_id = 'd1', source = 's'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
__________________________ test_has_label_and_to_text __________________________

    def test_has_label_and_to_text():
>       kg = build_kg()
             ^^^^^^^^^^

tests/unit/test_knowledge_graph_text.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/unit/test_knowledge_graph_text.py:24: in build_kg
    kg.add_document("d1", "src", text="doc text")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f67216a78f0>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f67216a7230>)
doc_id = 'd1', source = 'src'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
_______________________ test_text_helpers_and_auto_tools _______________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f67216a7140>

    def test_text_helpers_and_auto_tools(monkeypatch):
>       kg = build_kg()
             ^^^^^^^^^^

tests/unit/test_knowledge_graph_text.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/unit/test_knowledge_graph_text.py:24: in build_kg
    kg.add_document("d1", "src", text="doc text")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f67216a68d0>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f67216a6870>)
doc_id = 'd1', source = 'src'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
______________________________ test_set_property _______________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6721382570>

    def test_set_property(monkeypatch):
>       kg = build_kg()
             ^^^^^^^^^^

tests/unit/test_knowledge_graph_text.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/unit/test_knowledge_graph_text.py:24: in build_kg
    kg.add_document("d1", "src", text="doc text")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = KnowledgeGraph(graph=<datacreek.core.knowledge_graph._GraphStub object at 0x7f67215b0380>, use_hnsw=False, index=<datacreek.utils.retrieval.EmbeddingIndex object at 0x7f67215b3e60>)
doc_id = 'd1', source = 'src'

    def add_document(  # pragma: no cover - heavy
        self,
        doc_id: str,
        source: str,
        *,
        text: str | None = None,
        author: str | None = None,
        organization: str | None = None,
        checksum: str | None = None,
        uid: str | None = None,
    ) -> None:
        """Insert a document node in the graph."""
>       if self.graph.has_node(doc_id):
           ^^^^^^^^^^^^^^^^^^^
E       AttributeError: '_GraphStub' object has no attribute 'has_node'

datacreek/core/knowledge_graph.py:267: AttributeError
____________________________ test_check_vllm_server ____________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6721422060>

    def test_check_vllm_server(monkeypatch):
        _patch_config(monkeypatch)
        client = llm.LLMClient
>       monkeypatch.setattr(llm.requests, "get", lambda *a, **k: DummyResp(200, {"ok": True}))

tests/unit/test_llm_client.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <datacreek.models.llm_client._RequestsStub object at 0x7f67216df7a0>
name = 'get'

    def __getattr__(self, name: str):
>       raise ImportError("requests library is required for HTTP operations")
E       ImportError: requests library is required for HTTP operations

datacreek/models/llm_client.py:24: ImportError
___________________________ test_vllm_chat_and_batch ___________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6721562480>

    def test_vllm_chat_and_batch(monkeypatch):
        _patch_config(monkeypatch)
        monkeypatch.setattr(llm.LLMClient, "_check_vllm_server", lambda self: (True, {}))
>       import datacreek.analysis.generation as gen

tests/unit/test_llm_client.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    from __future__ import annotations
    
    """Graph generation utilities."""
    
    import logging
    import math
    import random
    from typing import Dict, Iterable
    
>   import networkx as nx
E   ModuleNotFoundError: No module named 'networkx'

datacreek/analysis/generation.py:10: ModuleNotFoundError
___________________________ test_llm_service_abatch ____________________________
async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted
________________________ test_load_pipelines_from_file _________________________

tmp_path = PosixPath('/tmp/pytest-of-root/pytest-11/test_load_pipelines_from_file0')

    def test_load_pipelines_from_file(tmp_path):
        yaml_text = (
            'qa:\n  steps: [ingest, generate_qa]\n  trainings: [sft]\n  description: foo\n'
        )
        path = tmp_path / 'p.yaml'
        path.write_text(yaml_text)
>       data = pipelines.load_pipelines_from_file(path)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/unit/test_pipelines.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

path = PosixPath('/tmp/pytest-of-root/pytest-11/test_load_pipelines_from_file0/p.yaml')

    def load_pipelines_from_file(path: Path) -> Dict[DatasetType, GenerationPipeline]:
        """Load pipeline definitions from a YAML configuration file."""
    
>       import yaml
E       ModuleNotFoundError: No module named 'yaml'

datacreek/pipelines.py:439: ModuleNotFoundError
__________________ test_load_pipelines_from_file_unknown_type __________________

tmp_path = PosixPath('/tmp/pytest-of-root/pytest-11/test_load_pipelines_from_file_0')
caplog = <_pytest.logging.LogCaptureFixture object at 0x7f6721533e30>

    def test_load_pipelines_from_file_unknown_type(tmp_path, caplog):
        yaml_text = 'foo:\n  steps: [ingest]\n  trainings: [sft]\n'
        path = tmp_path / 'p.yaml'
        path.write_text(yaml_text)
        with caplog.at_level('WARNING'):
>           data = pipelines.load_pipelines_from_file(path)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/unit/test_pipelines.py:179: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

path = PosixPath('/tmp/pytest-of-root/pytest-11/test_load_pipelines_from_file_0/p.yaml')

    def load_pipelines_from_file(path: Path) -> Dict[DatasetType, GenerationPipeline]:
        """Load pipeline definitions from a YAML configuration file."""
    
>       import yaml
E       ModuleNotFoundError: No module named 'yaml'

datacreek/pipelines.py:439: ModuleNotFoundError
___________________________ test_update_ttl_decrease ___________________________
async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted
___________________________ test_update_ttl_increase ___________________________
async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted
___________________________ test_pid_loop_and_start ____________________________
async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted
____________________________ test_update_ttl_error _____________________________
async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted
___________________________ test_update_ttl_clamping ___________________________
async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted
_____________________________ test_pid_loop_errors _____________________________
async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted
______________________ test_embedding_index_basic_search _______________________

self = <datacreek.utils.retrieval.EmbeddingIndex object at 0x7f67202146e0>

    def build(self) -> None:
        if not self.texts:
            return
        global TfidfVectorizer, NearestNeighbors, np
        if TfidfVectorizer is None or NearestNeighbors is None or np is None:
            try:
>               import numpy as _np
E               ModuleNotFoundError: No module named 'numpy'

datacreek/utils/retrieval.py:54: ModuleNotFoundError

During handling of the above exception, another exception occurred:

    def test_embedding_index_basic_search():
        idx = retrieval.EmbeddingIndex()
        idx.add('1', 'foo bar')
        idx.add('2', 'bar baz')
        idx.add('3', 'foo baz qux')
>       idx.build()

tests/unit/test_retrieval_basic.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <datacreek.utils.retrieval.EmbeddingIndex object at 0x7f67202146e0>

    def build(self) -> None:
        if not self.texts:
            return
        global TfidfVectorizer, NearestNeighbors, np
        if TfidfVectorizer is None or NearestNeighbors is None or np is None:
            try:
                import numpy as _np
                from sklearn.feature_extraction.text import TfidfVectorizer as _TF
                from sklearn.neighbors import NearestNeighbors as _NN
    
                np = _np
                TfidfVectorizer = _TF
                NearestNeighbors = _NN
            except Exception as exc:
                # Fall back to simple count vectors if scikit-learn is missing
>               np = _np  # type: ignore[name-defined]
                     ^^^
E               UnboundLocalError: cannot access local variable '_np' where it is not associated with a value

datacreek/utils/retrieval.py:63: UnboundLocalError
_______________________ test_remove_and_embed_transform ________________________

self = <datacreek.utils.retrieval.EmbeddingIndex object at 0x7f6721381820>

    def build(self) -> None:
        if not self.texts:
            return
        global TfidfVectorizer, NearestNeighbors, np
        if TfidfVectorizer is None or NearestNeighbors is None or np is None:
            try:
>               import numpy as _np
E               ModuleNotFoundError: No module named 'numpy'

datacreek/utils/retrieval.py:54: ModuleNotFoundError

During handling of the above exception, another exception occurred:

    def test_remove_and_embed_transform():
        idx = retrieval.EmbeddingIndex()
        idx.add('1', 'alpha beta')
        idx.add('2', 'beta gamma')
>       idx.build()

tests/unit/test_retrieval_basic.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <datacreek.utils.retrieval.EmbeddingIndex object at 0x7f6721381820>

    def build(self) -> None:
        if not self.texts:
            return
        global TfidfVectorizer, NearestNeighbors, np
        if TfidfVectorizer is None or NearestNeighbors is None or np is None:
            try:
                import numpy as _np
                from sklearn.feature_extraction.text import TfidfVectorizer as _TF
                from sklearn.neighbors import NearestNeighbors as _NN
    
                np = _np
                TfidfVectorizer = _TF
                NearestNeighbors = _NN
            except Exception as exc:
                # Fall back to simple count vectors if scikit-learn is missing
>               np = _np  # type: ignore[name-defined]
                     ^^^
E               UnboundLocalError: cannot access local variable '_np' where it is not associated with a value

datacreek/utils/retrieval.py:63: UnboundLocalError
________________________ test_build_fallback_no_sklearn ________________________

name = 'numpy'
args = ({'Counter': <class 'collections.Counter'>, 'Dict': typing.Dict, 'EmbeddingIndex': <class 'datacreek.utils.retrieval.EmbeddingIndex'>, 'List': typing.List, ...}, None, None, 0)
kwargs = {}

    def fake_import(name, *args, **kwargs):
        if name.startswith('sklearn'):
            raise ImportError
>       return orig_import(name, *args, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       ModuleNotFoundError: No module named 'numpy'

tests/unit/test_retrieval_basic.py:55: ModuleNotFoundError

During handling of the above exception, another exception occurred:

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6721561b20>

    def test_build_fallback_no_sklearn(monkeypatch):
        monkeypatch.setattr(retrieval, 'TfidfVectorizer', None)
        monkeypatch.setattr(retrieval, 'NearestNeighbors', None)
        monkeypatch.setattr(retrieval, 'np', None)
    
        orig_import = builtins.__import__
        def fake_import(name, *args, **kwargs):
            if name.startswith('sklearn'):
                raise ImportError
            return orig_import(name, *args, **kwargs)
        monkeypatch.setattr(builtins, '__import__', fake_import)
    
        idx = retrieval.EmbeddingIndex()
        idx.add('1', 'hello world')
>       idx.build()

tests/unit/test_retrieval_basic.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <datacreek.utils.retrieval.EmbeddingIndex object at 0x7f67215303b0>

    def build(self) -> None:
        if not self.texts:
            return
        global TfidfVectorizer, NearestNeighbors, np
        if TfidfVectorizer is None or NearestNeighbors is None or np is None:
            try:
                import numpy as _np
                from sklearn.feature_extraction.text import TfidfVectorizer as _TF
                from sklearn.neighbors import NearestNeighbors as _NN
    
                np = _np
                TfidfVectorizer = _TF
                NearestNeighbors = _NN
            except Exception as exc:
                # Fall back to simple count vectors if scikit-learn is missing
>               np = _np  # type: ignore[name-defined]
                     ^^^
E               UnboundLocalError: cannot access local variable '_np' where it is not associated with a value

datacreek/utils/retrieval.py:63: UnboundLocalError
__________________________ test_tool_generator_async ___________________________
async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted
___________________________ test_progress_with_stub ____________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f6722a9c380>

    def test_progress_with_stub(monkeypatch):
        class FakeProgress:
            __module__ = 'rich.progress'
        rich_mod = types.SimpleNamespace(Progress=FakeProgress)
        # stub progress module with simple functions
        prog = types.SimpleNamespace(
            create_progress=lambda *a, **k: ('p', 1),
            progress_context=contextmanager(lambda *a, **k: iter([('p', 1)]))
        )
        monkeypatch.setitem(sys.modules, 'datacreek.utils.progress', prog)
        utils = reload_utils(monkeypatch, rich_mod)
>       assert utils.create_progress('a', 1) == ('p', 1)
E       AssertionError: assert (None, 0) == ('p', 1)
E         
E         At index 0 diff: None != 'p'
E         Use -v to get more diff

tests/unit/test_utils_init_extra.py:36: AssertionError
=============================== warnings summary ===============================
tests/unit/test_batch.py:59
  /workspace/datacreek/tests/unit/test_batch.py:59: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

tests/unit/test_batch.py:67
  /workspace/datacreek/tests/unit/test_batch.py:67: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

tests/unit/test_batch.py:74
  /workspace/datacreek/tests/unit/test_batch.py:74: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

tests/unit/test_batch.py:91
  /workspace/datacreek/tests/unit/test_batch.py:91: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

tests/unit/test_conversation_generator.py:42
  /workspace/datacreek/tests/unit/test_conversation_generator.py:42: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

tests/unit/test_core_ingest.py:68
  /workspace/datacreek/tests/unit/test_core_ingest.py:68: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

tests/unit/test_curate.py:37
  /workspace/datacreek/tests/unit/test_curate.py:37: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

tests/unit/test_curate.py:47
  /workspace/datacreek/tests/unit/test_curate.py:47: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

tests/unit/test_curate.py:56
  /workspace/datacreek/tests/unit/test_curate.py:56: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

tests/unit/test_curate.py:66
  /workspace/datacreek/tests/unit/test_curate.py:66: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

tests/unit/test_curate.py:123
  /workspace/datacreek/tests/unit/test_curate.py:123: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

tests/unit/test_curate.py:128
  /workspace/datacreek/tests/unit/test_curate.py:128: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

tests/unit/test_curate.py:142
  /workspace/datacreek/tests/unit/test_curate.py:142: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

tests/unit/test_generators_additional.py:42
  /workspace/datacreek/tests/unit/test_generators_additional.py:42: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

tests/unit/test_generators_additional.py:57
  /workspace/datacreek/tests/unit/test_generators_additional.py:57: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

tests/unit/test_llm_service.py:34
  /workspace/datacreek/tests/unit/test_llm_service.py:34: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

tests/unit/test_redis_pid.py:23
  /workspace/datacreek/tests/unit/test_redis_pid.py:23: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

tests/unit/test_redis_pid.py:33
  /workspace/datacreek/tests/unit/test_redis_pid.py:33: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

tests/unit/test_redis_pid.py:54
  /workspace/datacreek/tests/unit/test_redis_pid.py:54: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

tests/unit/test_redis_pid.py:87
  /workspace/datacreek/tests/unit/test_redis_pid.py:87: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

tests/unit/test_redis_pid.py:100
  /workspace/datacreek/tests/unit/test_redis_pid.py:100: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

tests/unit/test_redis_pid.py:115
  /workspace/datacreek/tests/unit/test_redis_pid.py:115: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

tests/unit/test_tool_generator_extra.py:39
  /workspace/datacreek/tests/unit/test_tool_generator_extra.py:39: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
================================ tests coverage ================================
_______________ coverage: platform linux, python 3.12.10-final-0 _______________

Name                                             Stmts   Miss  Cover
--------------------------------------------------------------------
datacreek/__init__.py                               15      0   100%
datacreek/analysis/__init__.py                       1      0   100%
datacreek/analysis/autotune.py                      70     70     0%
datacreek/analysis/chebyshev_diag.py                14     14     0%
datacreek/analysis/compression.py                   94     94     0%
datacreek/analysis/explain_viz.py                   27      0   100%
datacreek/analysis/filtering.py                     28     28     0%
datacreek/analysis/fractal.py                      185    173     6%
datacreek/analysis/generation.py                   175    168     4%
datacreek/analysis/governance.py                    54     54     0%
datacreek/analysis/graphwave_bandwidth.py           35     35     0%
datacreek/analysis/graphwave_cuda.py                17     17     0%
datacreek/analysis/hybrid_ann.py                    17     17     0%
datacreek/analysis/hypergraph.py                    87     87     0%
datacreek/analysis/index.py                         72     62    14%
datacreek/analysis/information.py                   98     98     0%
datacreek/analysis/ingestion.py                     28      3    89%
datacreek/analysis/mapper.py                       270    270     0%
datacreek/analysis/monitoring.py                    71      2    97%
datacreek/analysis/multiview.py                    155    148     5%
datacreek/analysis/node2vec_tuning.py               48     48     0%
datacreek/analysis/nprobe_tuning.py                 61     61     0%
datacreek/analysis/poincare_recentering.py          94     94     0%
datacreek/analysis/privacy.py                       14      0   100%
datacreek/analysis/rollback.py                      24     24     0%
datacreek/analysis/sheaf.py                        144    144     0%
datacreek/analysis/symmetry.py                      47     47     0%
datacreek/analysis/tpl.py                           57     57     0%
datacreek/analysis/tpl_incremental.py               49     49     0%
datacreek/api.py                                   188    184     2%
datacreek/backend/__init__.py                        2      0   100%
datacreek/backend/array_api.py                      22      3    86%
datacreek/backends.py                               89     13    85%
datacreek/cli.py                                    13     13     0%
datacreek/config/__init__.py                         0      0   100%
datacreek/config/schema.py                          14      0   100%
datacreek/config_models.py                         131     11    92%
datacreek/core/__init__.py                           6      0   100%
datacreek/core/cleanup.py                           19      2    89%
datacreek/core/context.py                           13      0   100%
datacreek/core/create.py                            29      3    90%
datacreek/core/curate.py                           158    123    22%
datacreek/core/dataset.py                            1      0   100%
datacreek/core/dataset_full.py                     289    289     0%
datacreek/core/dataset_light.py                     60      3    95%
datacreek/core/fractal.py                          105    105     0%
datacreek/core/ingest.py                           385     76    80%
datacreek/core/knowledge_graph.py                   57      3    95%
datacreek/core/runners.py                           76     76     0%
datacreek/core/save_as.py                           66     10    85%
datacreek/db.py                                     57     57     0%
datacreek/dp/__init__.py                             2      0   100%
datacreek/dp/accountant.py                          21      1    95%
datacreek/generators/__init__.py                    30      0   100%
datacreek/generators/base.py                        18      2    89%
datacreek/generators/conversation_generator.py      25      2    92%
datacreek/generators/cot_generator.py               97     97     0%
datacreek/generators/kg_generator.py                64     64     0%
datacreek/generators/multi_tool_generator.py        30      2    93%
datacreek/generators/pref_generator.py              59     26    56%
datacreek/generators/qa_generator.py                80     68    15%
datacreek/generators/tool_generator.py              30      2    93%
datacreek/generators/vqa_generator.py               59     59     0%
datacreek/models/__init__.py                        45      0   100%
datacreek/models/content_type.py                    13      0   100%
datacreek/models/cot.py                              9      1    89%
datacreek/models/export_format.py                    7      0   100%
datacreek/models/llm_client.py                      90     68    24%
datacreek/models/llm_service.py                     17      3    82%
datacreek/models/qa.py                              24      0   100%
datacreek/models/results.py                         61     11    82%
datacreek/models/stage.py                            7      0   100%
datacreek/models/task_status.py                     16      0   100%
datacreek/parsers/__init__.py                       18      3    83%
datacreek/parsers/audio_parser.py                   12      2    83%
datacreek/parsers/base.py                            3      0   100%
datacreek/parsers/code_parser.py                     6      0   100%
datacreek/parsers/docx_parser.py                    11      0   100%
datacreek/parsers/html_parser.py                    12      0   100%
datacreek/parsers/image_parser.py                   12      0   100%
datacreek/parsers/pdf_parser.py                     41      6    85%
datacreek/parsers/ppt_parser.py                     11      0   100%
datacreek/parsers/txt_parser.py                      6      0   100%
datacreek/parsers/whisper_audio_parser.py           32      6    81%
datacreek/parsers/youtube_parser.py                 17      2    88%
datacreek/pipelines.py                             292     39    87%
datacreek/plugins/__init__.py                        2      2     0%
datacreek/plugins/pgvector_export.py                53     53     0%
datacreek/routers/__init__.py                        2      2     0%
datacreek/routers/explain_router.py                 39     39     0%
datacreek/routers/vector_router.py                  25     25     0%
datacreek/schemas.py                                55     55     0%
datacreek/security/__init__.py                       0      0   100%
datacreek/security/dp_budget.py                     43      1    98%
datacreek/security/dp_middleware.py                 40     40     0%
datacreek/security/tenant_privacy.py                29     27     7%
datacreek/services.py                               98     98     0%
datacreek/storage.py                                21      6    71%
datacreek/tasks.py                                  77     77     0%
datacreek/telemetry.py                              39     34    13%
datacreek/templates/__init__.py                      1      0   100%
datacreek/templates/library.py                      43     35    19%
datacreek/utils/__init__.py                         54     10    81%
datacreek/utils/audio_vad.py                        28      0   100%
datacreek/utils/backpressure.py                     55      3    95%
datacreek/utils/batch.py                            38     16    58%
datacreek/utils/cache.py                            69      9    87%
datacreek/utils/checksum.py                          8      0   100%
datacreek/utils/chunking.py                         89      1    99%
datacreek/utils/config.py                          155     22    86%
datacreek/utils/crypto.py                           25      0   100%
datacreek/utils/curation_agent.py                   24      4    83%
datacreek/utils/dataset_cleanup.py                  16      0   100%
datacreek/utils/delta_export.py                     24      1    96%
datacreek/utils/emotion.py                          15      0   100%
datacreek/utils/entity_extraction.py                16      0   100%
datacreek/utils/evict_log.py                        36     36     0%
datacreek/utils/fact_extraction.py                  34      1    97%
datacreek/utils/format_converter.py                 27      0   100%
datacreek/utils/gitinfo.py                           8      0   100%
datacreek/utils/graph_text.py                       56     52     7%
datacreek/utils/image_captioning.py                 33      1    97%
datacreek/utils/image_dedup.py                      30     19    37%
datacreek/utils/kafka_queue.py                      35      4    89%
datacreek/utils/llm_processing.py                  136     22    84%
datacreek/utils/metrics.py                           9      0   100%
datacreek/utils/modality.py                         27      0   100%
datacreek/utils/neo4j_breaker.py                    26     23    12%
datacreek/utils/progress.py                         14     11    21%
datacreek/utils/rate_limit.py                       46      3    93%
datacreek/utils/redis_helpers.py                    15      0   100%
datacreek/utils/redis_pid.py                        74     35    53%
datacreek/utils/retrieval.py                       132     99    25%
datacreek/utils/self_instruct.py                    42     37    12%
datacreek/utils/text.py                            119     14    88%
datacreek/utils/toolformer.py                       42      0   100%
datacreek/utils/whisper_batch.py                    57      9    84%
--------------------------------------------------------------------
TOTAL                                             7289   4225    42%
=========================== short test summary info ============================
FAILED tests/unit/test_batch.py::test_async_process_batches_success - Failed:...
FAILED tests/unit/test_batch.py::test_async_process_batches_error - Failed: a...
FAILED tests/unit/test_batch.py::test_async_process_batches_parse_error - Fai...
FAILED tests/unit/test_batch.py::test_async_process_batches_raise_on_error - ...
FAILED tests/unit/test_config_utils.py::test_format_and_model_profiles - Asse...
FAILED tests/unit/test_conversation_generator.py::test_conversation_generator_async
FAILED tests/unit/test_core_ingest.py::test_ingest_into_dataset_async - Faile...
FAILED tests/unit/test_create.py::test_process_file_qa - ImportError: import ...
FAILED tests/unit/test_create.py::test_process_file_async - ImportError: impo...
FAILED tests/unit/test_curate.py::test_curate_qa_pairs_async - Failed: async ...
FAILED tests/unit/test_curate.py::test_curate_qa_pairs_async_invalid - Failed...
FAILED tests/unit/test_curate.py::test_curate_qa_pairs_async_parse_error - Fa...
FAILED tests/unit/test_curate.py::test_curate_qa_pairs_async_resume - Failed:...
FAILED tests/unit/test_curate.py::test_curate_qa_pairs_async_input_errors - F...
FAILED tests/unit/test_curate.py::test_curate_from_file - Failed: async def f...
FAILED tests/unit/test_curate.py::test_curate_resume_invalid_json - Failed: a...
FAILED tests/unit/test_generators_additional.py::test_multi_tool_async - Fail...
FAILED tests/unit/test_generators_additional.py::test_pref_list_async - Faile...
FAILED tests/unit/test_knowledge_graph_advanced.py::test_structure_helpers_and_queries
FAILED tests/unit/test_knowledge_graph_advanced.py::test_embeddings_and_centrality
FAILED tests/unit/test_knowledge_graph_basic.py::test_knowledge_graph_basic
FAILED tests/unit/test_knowledge_graph_context_extra.py::test_get_chunk_context_full_range
FAILED tests/unit/test_knowledge_graph_context_extra.py::test_get_document_for_chunk_missing
FAILED tests/unit/test_knowledge_graph_errors.py::test_duplicate_nodes_and_links
FAILED tests/unit/test_knowledge_graph_errors.py::test_unknown_nodes_and_invalid_property
FAILED tests/unit/test_knowledge_graph_extended.py::test_linking_helpers_and_conversions
FAILED tests/unit/test_knowledge_graph_extended.py::test_search_with_links_and_queries
FAILED tests/unit/test_knowledge_graph_extended.py::test_chunk_document_queries_and_cleanup
FAILED tests/unit/test_knowledge_graph_facts.py::test_fact_confidence_and_verify
FAILED tests/unit/test_knowledge_graph_io.py::test_to_from_neo4j_roundtrip - ...
FAILED tests/unit/test_knowledge_graph_links.py::test_link_helpers_and_conflicts
FAILED tests/unit/test_knowledge_graph_links.py::test_remove_and_renumber - A...
FAILED tests/unit/test_knowledge_graph_links2.py::test_entity_link_helpers_and_serialization
FAILED tests/unit/test_knowledge_graph_media_atoms.py::test_add_image_creates_caption_edges
FAILED tests/unit/test_knowledge_graph_media_atoms.py::test_remove_chunk_renumbers_sequences
FAILED tests/unit/test_knowledge_graph_media_atoms.py::test_atom_molecule_and_hyperedge_simplex
FAILED tests/unit/test_knowledge_graph_merge.py::test_merge_entity_nodes - At...
FAILED tests/unit/test_knowledge_graph_navigation.py::test_section_and_chunk_navigation
FAILED tests/unit/test_knowledge_graph_navigation.py::test_transcript_link - ...
FAILED tests/unit/test_knowledge_graph_neighbors.py::test_get_similar_chunks_data
FAILED tests/unit/test_knowledge_graph_neighbors.py::test_get_chunk_neighbors
FAILED tests/unit/test_knowledge_graph_neighbors_data.py::test_get_chunk_neighbors_data
FAILED tests/unit/test_knowledge_graph_queries.py::test_fact_and_entity_queries
FAILED tests/unit/test_knowledge_graph_queries.py::test_chunk_context_helpers
FAILED tests/unit/test_knowledge_graph_search_extra.py::test_search_documents_and_chunks
FAILED tests/unit/test_knowledge_graph_search_extra.py::test_search_embeddings_and_hybrid
FAILED tests/unit/test_knowledge_graph_search_extra.py::test_remove_document_and_chunk
FAILED tests/unit/test_knowledge_graph_search_features.py::test_search_with_links_and_fact_confidence
FAILED tests/unit/test_knowledge_graph_similarity.py::test_link_similar_sections_and_documents
FAILED tests/unit/test_knowledge_graph_similarity.py::test_get_similar_sections_and_documents
FAILED tests/unit/test_knowledge_graph_similarity_extra.py::test_get_similar_sections_filters_types
FAILED tests/unit/test_knowledge_graph_similarity_extra.py::test_get_similar_documents_filters_types
FAILED tests/unit/test_knowledge_graph_spectral.py::test_spectral_metrics - A...
FAILED tests/unit/test_knowledge_graph_text.py::test_has_label_and_to_text - ...
FAILED tests/unit/test_knowledge_graph_text.py::test_text_helpers_and_auto_tools
FAILED tests/unit/test_knowledge_graph_text.py::test_set_property - Attribute...
FAILED tests/unit/test_llm_client.py::test_check_vllm_server - ImportError: r...
FAILED tests/unit/test_llm_client.py::test_vllm_chat_and_batch - ModuleNotFou...
FAILED tests/unit/test_llm_service.py::test_llm_service_abatch - Failed: asyn...
FAILED tests/unit/test_pipelines.py::test_load_pipelines_from_file - ModuleNo...
FAILED tests/unit/test_pipelines.py::test_load_pipelines_from_file_unknown_type
FAILED tests/unit/test_redis_pid.py::test_update_ttl_decrease - Failed: async...
FAILED tests/unit/test_redis_pid.py::test_update_ttl_increase - Failed: async...
FAILED tests/unit/test_redis_pid.py::test_pid_loop_and_start - Failed: async ...
FAILED tests/unit/test_redis_pid.py::test_update_ttl_error - Failed: async de...
FAILED tests/unit/test_redis_pid.py::test_update_ttl_clamping - Failed: async...
FAILED tests/unit/test_redis_pid.py::test_pid_loop_errors - Failed: async def...
FAILED tests/unit/test_retrieval_basic.py::test_embedding_index_basic_search
FAILED tests/unit/test_retrieval_basic.py::test_remove_and_embed_transform - ...
FAILED tests/unit/test_retrieval_basic.py::test_build_fallback_no_sklearn - U...
FAILED tests/unit/test_tool_generator_extra.py::test_tool_generator_async - F...
FAILED tests/unit/test_utils_init_extra.py::test_progress_with_stub - Asserti...
ERROR tests/unit/test_api.py
ERROR tests/unit/test_autotune.py
ERROR tests/unit/test_chebyshev_diag.py
ERROR tests/unit/test_cli.py
ERROR tests/unit/test_compression.py
ERROR tests/unit/test_core_fractal.py
ERROR tests/unit/test_dp_middleware.py
ERROR tests/unit/test_explain_router.py
ERROR tests/unit/test_filtering.py
ERROR tests/unit/test_fractal.py
ERROR tests/unit/test_generation.py
ERROR tests/unit/test_generators.py
ERROR tests/unit/test_governance.py
ERROR tests/unit/test_graph_text.py
ERROR tests/unit/test_graphwave_bandwidth.py
ERROR tests/unit/test_hybrid_ann.py
ERROR tests/unit/test_hypergraph.py
ERROR tests/unit/test_image_dedup.py
ERROR tests/unit/test_index.py
ERROR tests/unit/test_information.py
ERROR tests/unit/test_knowledge_graph_additional.py
ERROR tests/unit/test_knowledge_graph_analysis.py
ERROR tests/unit/test_knowledge_graph_cleanup.py
ERROR tests/unit/test_knowledge_graph_embeddings.py
ERROR tests/unit/test_knowledge_graph_enrich.py
ERROR tests/unit/test_knowledge_graph_entropy.py
ERROR tests/unit/test_knowledge_graph_extra.py
ERROR tests/unit/test_knowledge_graph_hyper.py
ERROR tests/unit/test_knowledge_graph_meta.py
ERROR tests/unit/test_knowledge_graph_more.py
ERROR tests/unit/test_knowledge_graph_operations.py
ERROR tests/unit/test_knowledge_graph_scoring.py
ERROR tests/unit/test_mapper.py
ERROR tests/unit/test_multiview.py
ERROR tests/unit/test_neo4j_breaker.py
ERROR tests/unit/test_poincare_recentering.py
ERROR tests/unit/test_progress.py
ERROR tests/unit/test_qagenerator_basic.py
ERROR tests/unit/test_retrieval.py
ERROR tests/unit/test_retrieval_neighbors.py
ERROR tests/unit/test_rollback.py
ERROR tests/unit/test_runners.py
ERROR tests/unit/test_self_instruct.py
ERROR tests/unit/test_services.py
ERROR tests/unit/test_sheaf.py
ERROR tests/unit/test_storage.py
ERROR tests/unit/test_symmetry.py
ERROR tests/unit/test_tasks.py
ERROR tests/unit/test_telemetry.py
ERROR tests/unit/test_template_library.py
ERROR tests/unit/test_tenant_privacy.py
ERROR tests/unit/test_vector_router.py
ERROR tests/unit/test_vqa_generator_extra.py
72 failed, 234 passed, 23 warnings, 53 errors in 14.13s
.........F.........FF............................F......FF.........      [100%]
==================================== ERRORS ====================================
_________________ ERROR collecting tests/heavy/test_ann_cpu.py _________________
ImportError while importing test module '/workspace/datacreek/tests/heavy/test_ann_cpu.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/heavy/test_ann_cpu.py:6: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
_____________ ERROR collecting tests/heavy/test_autotune_heavy.py ______________
ImportError while importing test module '/workspace/datacreek/tests/heavy/test_autotune_heavy.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/heavy/test_autotune_heavy.py:2: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
_____________ ERROR collecting tests/heavy/test_chebyshev_diag.py ______________
ImportError while importing test module '/workspace/datacreek/tests/heavy/test_chebyshev_diag.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/heavy/test_chebyshev_diag.py:3: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
_______________ ERROR collecting tests/heavy/test_compression.py _______________
ImportError while importing test module '/workspace/datacreek/tests/heavy/test_compression.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/heavy/test_compression.py:3: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
______________ ERROR collecting tests/heavy/test_core_fractal.py _______________
ImportError while importing test module '/workspace/datacreek/tests/heavy/test_core_fractal.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/heavy/test_core_fractal.py:3: in <module>
    import networkx as nx
E   ModuleNotFoundError: No module named 'networkx'
________________ ERROR collecting tests/heavy/test_filtering.py ________________
ImportError while importing test module '/workspace/datacreek/tests/heavy/test_filtering.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/heavy/test_filtering.py:1: in <module>
    import networkx as nx
E   ModuleNotFoundError: No module named 'networkx'
_________________ ERROR collecting tests/heavy/test_fractal.py _________________
ImportError while importing test module '/workspace/datacreek/tests/heavy/test_fractal.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/heavy/test_fractal.py:4: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
_______________ ERROR collecting tests/heavy/test_generation.py ________________
ImportError while importing test module '/workspace/datacreek/tests/heavy/test_generation.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/heavy/test_generation.py:4: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
_______________ ERROR collecting tests/heavy/test_governance.py ________________
ImportError while importing test module '/workspace/datacreek/tests/heavy/test_governance.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/heavy/test_governance.py:1: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
___________ ERROR collecting tests/heavy/test_graphwave_bandwidth.py ___________
ImportError while importing test module '/workspace/datacreek/tests/heavy/test_graphwave_bandwidth.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/heavy/test_graphwave_bandwidth.py:1: in <module>
    import networkx as nx
E   ModuleNotFoundError: No module named 'networkx'
______________ ERROR collecting tests/heavy/test_heavy_modules.py ______________
ImportError while importing test module '/workspace/datacreek/tests/heavy/test_heavy_modules.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/heavy/test_heavy_modules.py:6: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
_______________ ERROR collecting tests/heavy/test_hybrid_ann.py ________________
ImportError while importing test module '/workspace/datacreek/tests/heavy/test_hybrid_ann.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/heavy/test_hybrid_ann.py:2: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
_______________ ERROR collecting tests/heavy/test_hypergraph.py ________________
ImportError while importing test module '/workspace/datacreek/tests/heavy/test_hypergraph.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/heavy/test_hypergraph.py:1: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
__________________ ERROR collecting tests/heavy/test_index.py __________________
ImportError while importing test module '/workspace/datacreek/tests/heavy/test_index.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/heavy/test_index.py:2: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
_______________ ERROR collecting tests/heavy/test_information.py _______________
ImportError while importing test module '/workspace/datacreek/tests/heavy/test_information.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/heavy/test_information.py:4: in <module>
    import networkx as nx
E   ModuleNotFoundError: No module named 'networkx'
_________________ ERROR collecting tests/heavy/test_mapper.py __________________
ImportError while importing test module '/workspace/datacreek/tests/heavy/test_mapper.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/heavy/test_mapper.py:7: in <module>
    import fakeredis
E   ModuleNotFoundError: No module named 'fakeredis'
____________ ERROR collecting tests/heavy/test_metrics_progress.py _____________
ImportError while importing test module '/workspace/datacreek/tests/heavy/test_metrics_progress.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/heavy/test_metrics_progress.py:4: in <module>
    import datacreek.utils.progress as prog
datacreek/utils/progress.py:4: in <module>
    from rich.progress import (
E   ModuleNotFoundError: No module named 'rich'
________________ ERROR collecting tests/heavy/test_multiview.py ________________
ImportError while importing test module '/workspace/datacreek/tests/heavy/test_multiview.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/heavy/test_multiview.py:1: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
________________ ERROR collecting tests/heavy/test_poincare.py _________________
ImportError while importing test module '/workspace/datacreek/tests/heavy/test_poincare.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/heavy/test_poincare.py:4: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
_____________ ERROR collecting tests/heavy/test_retrieval_heavy.py _____________
ImportError while importing test module '/workspace/datacreek/tests/heavy/test_retrieval_heavy.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/heavy/test_retrieval_heavy.py:2: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
__________________ ERROR collecting tests/heavy/test_sheaf.py __________________
ImportError while importing test module '/workspace/datacreek/tests/heavy/test_sheaf.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/heavy/test_sheaf.py:3: in <module>
    import numpy as np
E   ModuleNotFoundError: No module named 'numpy'
________________ ERROR collecting tests/heavy/test_symmetry.py _________________
ImportError while importing test module '/workspace/datacreek/tests/heavy/test_symmetry.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/root/.pyenv/versions/3.12.10/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/heavy/test_symmetry.py:1: in <module>
    import networkx as nx
E   ModuleNotFoundError: No module named 'networkx'
=================================== FAILURES ===================================
________________________ test_format_and_model_profiles ________________________

tmp_path = PosixPath('/tmp/pytest-of-root/pytest-12/test_format_and_model_profiles0')
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7f31d0cb1490>

    @pytest.mark.heavy
    def test_format_and_model_profiles(tmp_path, monkeypatch):
        cfg_file = create_config_file(tmp_path)
        monkeypatch.setenv("DATACREEK_CONFIG", str(cfg_file))
        cfg = config.load_config()
        fs = config.get_format_settings(cfg)
        assert fs.include_metadata is False
        profile = config.get_model_profile(cfg, "small")
>       assert profile == {"dim": 128}
E       AssertionError: assert '{dim: 128}' == {'dim': 128}

tests/heavy/test_config_utils_heavy.py:57: AssertionError
_________________________ test_generation_layer_async __________________________
async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted
____________________________ test_ingest_file_async ____________________________
async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted
________________________________ test_sheaf_sla ________________________________

    def test_sheaf_sla():
        sla = rollback.SheafSLA(threshold_hours=1)
        sla.record_failure(1000.0)
        sla.record_failure(4600.0)
>       assert pytest.approx(sla.mttr_hours(), 0.01) == 1.0
                             ^^^^^^^^^^^^^^^^

tests/heavy/test_misc_analysis.py:118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <datacreek.analysis.rollback.SheafSLA object at 0x7f31d0393c50>

    def mttr_hours(self) -> float:
        if len(self._fail_times) < 2:
            return 0.0
>       import numpy as np
E       ModuleNotFoundError: No module named 'numpy'

datacreek/analysis/rollback.py:40: ModuleNotFoundError
_______________________________ test_update_ttl ________________________________
async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted
________________________________ test_pid_loop _________________________________
async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted
=============================== warnings summary ===============================
tests/heavy/test_dataset_full.py:152
  /workspace/datacreek/tests/heavy/test_dataset_full.py:152: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

tests/heavy/test_dataset_full.py:175
  /workspace/datacreek/tests/heavy/test_dataset_full.py:175: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

tests/heavy/test_redis_pid.py:24
  /workspace/datacreek/tests/heavy/test_redis_pid.py:24: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

tests/heavy/test_redis_pid.py:34
  /workspace/datacreek/tests/heavy/test_redis_pid.py:34: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
================================ tests coverage ================================
_______________ coverage: platform linux, python 3.12.10-final-0 _______________

Name                                             Stmts   Miss  Cover
--------------------------------------------------------------------
datacreek/__init__.py                               15      0   100%
datacreek/analysis/__init__.py                       1      0   100%
datacreek/analysis/autotune.py                      70     70     0%
datacreek/analysis/chebyshev_diag.py                14     14     0%
datacreek/analysis/compression.py                   94     94     0%
datacreek/analysis/explain_viz.py                   27      1    96%
datacreek/analysis/filtering.py                     28     28     0%
datacreek/analysis/fractal.py                      185    173     6%
datacreek/analysis/generation.py                   175    175     0%
datacreek/analysis/governance.py                    54     54     0%
datacreek/analysis/graphwave_bandwidth.py           35     35     0%
datacreek/analysis/graphwave_cuda.py                17     17     0%
datacreek/analysis/hybrid_ann.py                    17     17     0%
datacreek/analysis/hypergraph.py                    87     87     0%
datacreek/analysis/index.py                         72     62    14%
datacreek/analysis/information.py                   98     98     0%
datacreek/analysis/ingestion.py                     28      4    86%
datacreek/analysis/mapper.py                       270    270     0%
datacreek/analysis/monitoring.py                    71      2    97%
datacreek/analysis/multiview.py                    155    148     5%
datacreek/analysis/node2vec_tuning.py               48     48     0%
datacreek/analysis/nprobe_tuning.py                 61     61     0%
datacreek/analysis/poincare_recentering.py          94     94     0%
datacreek/analysis/privacy.py                       14      1    93%
datacreek/analysis/rollback.py                      24      4    83%
datacreek/analysis/sheaf.py                        144    144     0%
datacreek/analysis/symmetry.py                      47     47     0%
datacreek/analysis/tpl.py                           57     57     0%
datacreek/analysis/tpl_incremental.py               49     49     0%
datacreek/api.py                                   188    184     2%
datacreek/backend/__init__.py                        2      2     0%
datacreek/backend/array_api.py                      22     22     0%
datacreek/backends.py                               89     63    29%
datacreek/cli.py                                    13     13     0%
datacreek/config/__init__.py                         0      0   100%
datacreek/config/schema.py                          14      0   100%
datacreek/config_models.py                         131     11    92%
datacreek/core/__init__.py                           6      2    67%
datacreek/core/cleanup.py                           19     14    26%
datacreek/core/context.py                           13      6    54%
datacreek/core/create.py                            29     10    66%
datacreek/core/curate.py                           158    137    13%
datacreek/core/dataset.py                            1      0   100%
datacreek/core/dataset_full.py                     289     82    72%
datacreek/core/dataset_light.py                     60     21    65%
datacreek/core/fractal.py                          105    105     0%
datacreek/core/ingest.py                           385    385     0%
datacreek/core/knowledge_graph.py                   57      3    95%
datacreek/core/runners.py                           76     76     0%
datacreek/core/save_as.py                           66     52    21%
datacreek/db.py                                     57     57     0%
datacreek/dp/__init__.py                             2      2     0%
datacreek/dp/accountant.py                          21     21     0%
datacreek/generators/__init__.py                    30     30     0%
datacreek/generators/base.py                        18     18     0%
datacreek/generators/conversation_generator.py      25     25     0%
datacreek/generators/cot_generator.py               97     97     0%
datacreek/generators/kg_generator.py                64     64     0%
datacreek/generators/multi_tool_generator.py        30     30     0%
datacreek/generators/pref_generator.py              59     59     0%
datacreek/generators/qa_generator.py                80     80     0%
datacreek/generators/tool_generator.py              30     30     0%
datacreek/generators/vqa_generator.py               59     59     0%
datacreek/models/__init__.py                        45     39    13%
datacreek/models/content_type.py                    13      0   100%
datacreek/models/cot.py                              9      1    89%
datacreek/models/export_format.py                    7      7     0%
datacreek/models/llm_client.py                      90     57    37%
datacreek/models/llm_service.py                     17      7    59%
datacreek/models/qa.py                              24      5    79%
datacreek/models/results.py                         61     11    82%
datacreek/models/stage.py                            7      0   100%
datacreek/models/task_status.py                     16     16     0%
datacreek/parsers/__init__.py                       18     18     0%
datacreek/parsers/audio_parser.py                   12     12     0%
datacreek/parsers/base.py                            3      3     0%
datacreek/parsers/code_parser.py                     6      6     0%
datacreek/parsers/docx_parser.py                    11     11     0%
datacreek/parsers/html_parser.py                    12     12     0%
datacreek/parsers/image_parser.py                   12     12     0%
datacreek/parsers/pdf_parser.py                     41     41     0%
datacreek/parsers/ppt_parser.py                     11     11     0%
datacreek/parsers/txt_parser.py                      6      6     0%
datacreek/parsers/whisper_audio_parser.py           32     32     0%
datacreek/parsers/youtube_parser.py                 17     17     0%
datacreek/pipelines.py                             292    125    57%
datacreek/plugins/__init__.py                        2      2     0%
datacreek/plugins/pgvector_export.py                53     53     0%
datacreek/routers/__init__.py                        2      2     0%
datacreek/routers/explain_router.py                 39     39     0%
datacreek/routers/vector_router.py                  25     25     0%
datacreek/schemas.py                                55     55     0%
datacreek/security/__init__.py                       0      0   100%
datacreek/security/dp_budget.py                     43     21    51%
datacreek/security/dp_middleware.py                 40     40     0%
datacreek/security/tenant_privacy.py                29     29     0%
datacreek/services.py                               98     98     0%
datacreek/storage.py                                21     10    52%
datacreek/tasks.py                                  77     77     0%
datacreek/telemetry.py                              39     39     0%
datacreek/templates/__init__.py                      1      1     0%
datacreek/templates/library.py                      43     43     0%
datacreek/utils/__init__.py                         54     20    63%
datacreek/utils/audio_vad.py                        28     22    21%
datacreek/utils/backpressure.py                     55     37    33%
datacreek/utils/batch.py                            38      5    87%
datacreek/utils/cache.py                            69     14    80%
datacreek/utils/checksum.py                          8      8     0%
datacreek/utils/chunking.py                         89     78    12%
datacreek/utils/config.py                          155     26    83%
datacreek/utils/crypto.py                           25     16    36%
datacreek/utils/curation_agent.py                   24     24     0%
datacreek/utils/dataset_cleanup.py                  16     12    25%
datacreek/utils/delta_export.py                     24     14    42%
datacreek/utils/emotion.py                          15     15     0%
datacreek/utils/entity_extraction.py                16     16     0%
datacreek/utils/evict_log.py                        36     36     0%
datacreek/utils/fact_extraction.py                  34     34     0%
datacreek/utils/format_converter.py                 27     19    30%
datacreek/utils/gitinfo.py                           8      5    38%
datacreek/utils/graph_text.py                       56     52     7%
datacreek/utils/image_captioning.py                 33     33     0%
datacreek/utils/image_dedup.py                      30     30     0%
datacreek/utils/kafka_queue.py                      35      6    83%
datacreek/utils/llm_processing.py                  136     24    82%
datacreek/utils/metrics.py                           9      6    33%
datacreek/utils/modality.py                         27      0   100%
datacreek/utils/neo4j_breaker.py                    26     26     0%
datacreek/utils/progress.py                         14     11    21%
datacreek/utils/rate_limit.py                       46     30    35%
datacreek/utils/redis_helpers.py                    15     11    27%
datacreek/utils/redis_pid.py                        74     38    49%
datacreek/utils/retrieval.py                       132    108    18%
datacreek/utils/self_instruct.py                    42     42     0%
datacreek/utils/text.py                            119     11    91%
datacreek/utils/toolformer.py                       42     35    17%
datacreek/utils/whisper_batch.py                    57      5    91%
--------------------------------------------------------------------
TOTAL                                             7289   5466    25%
=========================== short test summary info ============================
FAILED tests/heavy/test_config_utils_heavy.py::test_format_and_model_profiles
FAILED tests/heavy/test_dataset_full.py::test_generation_layer_async - Failed...
FAILED tests/heavy/test_dataset_full.py::test_ingest_file_async - Failed: asy...
FAILED tests/heavy/test_misc_analysis.py::test_sheaf_sla - ModuleNotFoundErro...
FAILED tests/heavy/test_redis_pid.py::test_update_ttl - Failed: async def fun...
FAILED tests/heavy/test_redis_pid.py::test_pid_loop - Failed: async def funct...
ERROR tests/heavy/test_ann_cpu.py
ERROR tests/heavy/test_autotune_heavy.py
ERROR tests/heavy/test_chebyshev_diag.py
ERROR tests/heavy/test_compression.py
ERROR tests/heavy/test_core_fractal.py
ERROR tests/heavy/test_filtering.py
ERROR tests/heavy/test_fractal.py
ERROR tests/heavy/test_generation.py
ERROR tests/heavy/test_governance.py
ERROR tests/heavy/test_graphwave_bandwidth.py
ERROR tests/heavy/test_heavy_modules.py
ERROR tests/heavy/test_hybrid_ann.py
ERROR tests/heavy/test_hypergraph.py
ERROR tests/heavy/test_index.py
ERROR tests/heavy/test_information.py
ERROR tests/heavy/test_mapper.py
ERROR tests/heavy/test_metrics_progress.py
ERROR tests/heavy/test_multiview.py
ERROR tests/heavy/test_poincare.py
ERROR tests/heavy/test_retrieval_heavy.py
ERROR tests/heavy/test_sheaf.py
ERROR tests/heavy/test_symmetry.py
6 failed, 61 passed, 1 skipped, 4 warnings, 22 errors in 3.61s
